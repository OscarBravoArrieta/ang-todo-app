For all information for Angular: https://angular.dev/

 0. Creación del proyecto: ng new todoapp --skip-tests
     New way for implementing a ng for

     @for (item of tasks; track item) {
         {{ item }}
     }

 1. Generate componentes
     ng generate component pages/home
     ng generate component pages/labs

 2. Property Binding. Linkin a property oa html element with a variable in te backen
     <input type="text" [value]="title">

 3. Event Binding: click y doble click
    <button (click)="clickHandler()">Clic Me</button>

 4. Event binding: keydown
     <input type="text" (keydown)="keyBoardHandler($event)">

 5. Modelo de reactividad con Signals
     Signals es un Modelo de reactividad que tiene reactividad granular, contrario a zone.js que debia recorrer todo el dom para saber esto

 6.  Creando un Signal en Angular
     in the ts file: myfirstSignal = signal('Oscar')
     in the html file:  {{myfirstSignal()}}

 7. Directivas de control

 8. this.tasks.update((task) => [...task, newTask])
     Actualiza el valor del signal. Recibe el valor anterior y el nuevop valor
 
 9. Controlando un input
      constructor() {
         this.colorCtrl.valueChanges.subscribe(value => {
             console.log(value)
         })
     }

     colorCtrl = new FormControl()

     <input type="color" [formControl]="colorCtrl">
     <p>Color: {{ colorCtrl.value }}</p>
 10. Clases en Angular
     Activar las validaciones con una clase que se activa dinámicamente:
     nameCtrl = new FormControl("abc", {
         nonNullable: true,
         validators: [
             Validators.required,
             Validators.minLength(3),
         ]
     })

     <p>
         <input type="text" [formControl]="nameCtrl"> <br/>
         <span class="message-error" [class.show] = "nameCtrl.invalid && nameCtrl.touched">Nombre inválido</span>
     </p>
     .message-error {
         background-color: red;
         color: white;
         opacity: 0;
         transition: all linear .5s;
     }
     .message-error.show {
         opacity: 1;
     }
 11. Estados compuestos con computed
     Estados que derivan de otros estados
 12. Usando effect para localStorage
     Nota: Si el effect se va a colocar en un lugar diferente el constructor, debe configurrsele: { injector: this.injector }
     Para migrar a la nueva sintaxix de angular
     ng g @angular/core:control-flow



